When would you want to use a remote repository rather than keeping all your work
local?

    When you are collaborating with other people on a project.
    When you work from more than one computer on a solo project.
    Also a good idea to have a remote repository to act as a backup if you
    are working on a solo project from just one computer.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You may have changes on your local repository that have yet to be pushed
    to the remote and if someone else has pushed changes to a version of
    the file you are working on to the remote then automatically pulling it
    would overwrite the file you were working on on your local repository
    and you would lose your changes.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are where you use git hub to clone another repository to your git hub 
    account on git hub itself.
    Cloning is when you copy a branch of a repository from git hub to your local 
    machine or from one repository to another on you local machine.
    Branches are part a series of commits that can be traced back in terms of 
    parental succession to their common origin.  Branches enable you develop branch 
    off from a common point to explore developing new features and test them 
    without worrying that anotherr developers changes might impact on yours

    You would use a fork to make a copy of someone elses project in your own git hub
    repository.
    You would clone a repository when you wanted to work on it on a loca machine
    You would create a branch of a project when you wanted to try out a new feature

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a copy of the last known state of the remote stored locally means that
    you can compare the state of the remote on GitHub with the version on your
    local machine to see if there have been any changes to the GitHub version since 
    you last pulled it to your local machine.  

    You can use fetch to update your local copy of the GitHub master and then use 
    merge to merge any changes on your local master branch with the local copy of
    the GitHub master branch (orgin/master).  If this results in a conflict, you can 
    then open the file and make the amandments to resolve the conflict before saving
    the file addig it for staging with git add and commiting it to you local master 
    with git commit and then pushing it back to the GitHub master with git push.


How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Fill in your answer here

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
